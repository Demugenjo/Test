--- drivers/regulator/cpr3-regulator.c	2018-01-11 15:17:51.000000000 +0700
+++ drivers/regulator/cpr3-regulator.c	2018-01-28 10:13:46.268661464 +0700
@@ -4145,6 +4145,82 @@
 	.list_corner_voltage	= cpr3_regulator_list_corner_voltage,
 };
 
+#ifdef CONFIG_VOLTAGE_CONTROL
+int cpr_regulator_get_ceiling_voltage(struct regulator *regulator,
+		int cori)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count)
+		return cpr_vreg->corner[cori].ceiling_volt;
+
+	return -EINVAL;
+}
+int cpr_regulator_get_floor_voltage(struct regulator *regulator,
+		int cori)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count)
+		return cpr_vreg->corner[cori].floor_volt;
+
+	return -EINVAL;
+}
+int cpr_regulator_get_last_voltage(struct regulator *regulator,
+		int cori)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count)
+		return cpr_vreg->corner[cori].last_volt;
+
+	return -EINVAL;
+}
+
+int cpr_regulator_set_ceiling_voltage(struct regulator *regulator,
+		int cori, int volt)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count) {
+		mutex_lock(&cpr_vreg->thread->ctrl->lock);
+		cpr_vreg->corner[cori].ceiling_volt = volt;
+		mutex_unlock(&cpr_vreg->thread->ctrl->lock);
+		return 0;
+	}
+
+	return -EINVAL;
+}
+int cpr_regulator_set_floor_voltage(struct regulator *regulator,
+		int cori, int volt)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count) {
+		mutex_lock(&cpr_vreg->thread->ctrl->lock);
+		cpr_vreg->corner[cori].floor_volt = volt;
+		mutex_unlock(&cpr_vreg->thread->ctrl->lock);
+		return 0;
+	}
+
+	return -EINVAL;
+}
+int cpr_regulator_set_last_voltage(struct regulator *regulator,
+		int cori, int volt)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count) {
+		mutex_lock(&cpr_vreg->thread->ctrl->lock);
+		cpr_vreg->corner[cori].last_volt = volt;
+		mutex_unlock(&cpr_vreg->thread->ctrl->lock);
+		return 0;
+	}
+
+	return -EINVAL;
+}
+#endif
+
 /**
  * cprh_regulator_get_voltage() - get the voltage corner for the CPR3 regulator
  *			associated with the regulator device
